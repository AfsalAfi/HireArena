datasource db {
  provider = "postgresql" // Use your database provider (e.g., mysql, sqlite, etc.)
  url      = env("DATABASE_URL") // The connection string from your .env
}

generator client {
  provider = "prisma-client-js"
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}

enum JobCategories {
  ENGINEERING
  DESIGN
  MARKETING
  HR
  SALES
}

enum Skills {
  JAVASCRIPT
  REACT
  NODEJS
  PYTHON
  JAVA
}

model Job {
  id               String   @id @default(uuid())
  jobTitle         String
  salaryMin        Int
  salaryMax        Int
  jobDescription   String
  responsibilities String
  qualifications   String
  niceToHave       String?
  benefits         Json
  companyId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  employmentTypes JobEmploymentType[]
  categories      JobCategoryRelation[]
  requiredSkills  JobSkillRelation[]
}

model JobEmploymentType {
  id    String         @id @default(uuid())
  jobId String
  type  EmploymentType
  job   Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobCategoryRelation {
  id       String        @id @default(uuid())
  jobId    String
  category JobCategories
  job      Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobSkillRelation {
  id    String @id @default(uuid())
  jobId String
  skill Skills
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

// Skills Section

model CategoryType {
  id            String        @id @default(uuid())
  name          String
  description   String
  status        Boolean
  jobCategories JobCategory[] // A category type can have multiple job categories
}

model JobCategory {
  id             String       @id @default(uuid())      // Unique identifier (UUID)
  name           String                              // Name of the job category
  description    String                              // Description of the job category
  status         Boolean                             // Active status of the job category
  categoryType   CategoryType @relation(fields: [categoryTypeId], references: [id])  // Relationship with CategoryType model
  categoryTypeId String                              // Foreign key to CategoryType
  skills         Skill[]                             // One-to-many relationship: A job category can have multiple skills
}


// model TechStack {
//   id            String        @id @default(uuid())
//   name          String
//   status        Boolean
// }

model Skill {
  id              String        @id @default(uuid())      // Unique identifier (UUID)
  name            String                                // Name of the skill
  status          Boolean                               // Active status of the skill
  jobCategory     JobCategory @relation(fields: [jobCategoryId], references: [id])  // Relationship with JobCategory
  jobCategoryId   String                                // Foreign key to JobCategory
  createdAt       DateTime      @default(now())          // Automatically sets creation timestamp
  modifiedAt      DateTime      @updatedAt               // Automatically updates the timestamp when modified
}
